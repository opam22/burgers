// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/opam22/burgers/models"

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

// CreateBill provides a mock function with given fields: order
func (_m *IOrderRepository) CreateBill(order models.Order) (int64, error) {
	ret := _m.Called(order)

	var r0 int64
	if rf, ok := ret.Get(0).(func(models.Order) int64); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIngredientStock provides a mock function with given fields: ingredient
func (_m *IOrderRepository) GetIngredientStock(ingredient string) (int, error) {
	ret := _m.Called(ingredient)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(ingredient)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ingredient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIngredients provides a mock function with given fields:
func (_m *IOrderRepository) GetIngredients() ([]models.Ingredient, error) {
	ret := _m.Called()

	var r0 []models.Ingredient
	if rf, ok := ret.Get(0).(func() []models.Ingredient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Ingredient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMenu provides a mock function with given fields: idMenu
func (_m *IOrderRepository) GetMenu(idMenu int) (models.Menu, error) {
	ret := _m.Called(idMenu)

	var r0 models.Menu
	if rf, ok := ret.Get(0).(func(int) models.Menu); ok {
		r0 = rf(idMenu)
	} else {
		r0 = ret.Get(0).(models.Menu)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idMenu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMenuIngredients provides a mock function with given fields: idMenu
func (_m *IOrderRepository) GetMenuIngredients(idMenu int) ([]models.MenuIngredient, error) {
	ret := _m.Called(idMenu)

	var r0 []models.MenuIngredient
	if rf, ok := ret.Get(0).(func(int) []models.MenuIngredient); ok {
		r0 = rf(idMenu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MenuIngredient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idMenu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreOrderedMenu provides a mock function with given fields: orderedID, orderedMenu
func (_m *IOrderRepository) StoreOrderedMenu(orderedID int64, orderedMenu []models.IdMenus) error {
	ret := _m.Called(orderedID, orderedMenu)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []models.IdMenus) error); ok {
		r0 = rf(orderedID, orderedMenu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubstractIngredientStock provides a mock function with given fields: ingredient, quantity
func (_m *IOrderRepository) SubstractIngredientStock(ingredient string, quantity int) error {
	ret := _m.Called(ingredient, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(ingredient, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
